'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "TransaccionBaja"
Public Class TransaccionBaja

    Const _Procedimiento As String = "proc_TransaccionBaja"

    Private mUsuario As WWTSUsuario = Nothing

    Private mPardetTipoBaja As WWTSParametroDet = Nothing

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
        MyBase.New()
        OperadorDatos = _OperadorDatos
        EsNuevo = _EsNuevo
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _TraBaj_Codigo As Integer)
        Me.New(_OperadorDatos, False)
        TraBaj_Codigo = _TraBaj_Codigo
        If Me.Recargar Then
        Else
            Throw New System.Exception("No se puede cargar objeto TransaccionBaja")
        End If
    End Sub


    'Usuario
    Public Overridable Property Usuario() As WWTSUsuario
        Get
            If mUsuario Is Nothing AndAlso Not String.IsNullOrEmpty(Usuari_Codigo) Then
                mUsuario = New WWTSUsuario(OperadorDatos, Usuari_Codigo)
            End If
            Return Me.mUsuario
        End Get
        Set(value As WWTSUsuario)
            Me.mUsuario = value
            Usuari_Codigo = value.Usuari_Codigo
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Código", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)>
    Public ReadOnly Property CodigoString As String
        Get
            If TraBaj_Codigo = 0 Then
                Return String.Empty
            Else
                Return Format(TraBaj_Codigo, "000000")
            End If
        End Get
    End Property


    <Infoware.Reportes.CampoReporteAtributo("Usuario", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)>
    Public ReadOnly Property UsuarioString As String
        Get
            If Usuario Is Nothing Then
                Return String.Empty
            Else
                Return Usuario.Usuari_Descripcion
            End If
        End Get
    End Property

    Public ReadOnly Property Descripcion As String
        Get
            Return String.Format("{0}", TraBaj_Observacion)
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Observación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)>
    Public ReadOnly Property Observacion As String
        Get
            Return TraBaj_Observacion
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 100, True)>
    Public ReadOnly Property Fecha As Date
        Get
            Return TraBaj_Fecha
        End Get
    End Property

    'Parametrodet
    Public Overridable Overloads Property PardetTipoBaja As WWTSParametroDet
        Get
            If mPardetTipoBaja Is Nothing AndAlso Pardet_TipoBaja > 0 Then
                mPardetTipoBaja = New WWTSParametroDet(OperadorDatos, Parame_TipoBaja, Pardet_TipoBaja)
            End If
            Return Me.mPardetTipoBaja
        End Get
        Set(value As WWTSParametroDet)
            Me.mPardetTipoBaja = value
            If value Is Nothing Then
                Parame_TipoBaja = 0
                Pardet_TipoBaja = 0
            Else
                Parame_TipoBaja = value.Parame_Codigo
                Pardet_TipoBaja = value.Pardet_Secuencia
            End If
        End Set
    End Property

    Public ReadOnly Property ActivosBajaList As ActivoList
        Get
            Return ActivoList.ObtenerLista(Me)
        End Get
    End Property


#Region "ActivoList"
    Private WithEvents mActivos As ActivoList = Nothing

    Public Property Activos As ActivoList
        Get
            If mActivos Is Nothing Then
                If EsNuevo Then
                    mActivos = New ActivoList
                Else
                    mActivos = ActivoList.ObtenerLista(Me)
                End If
            End If
            Return mActivos
        End Get
        Set(value As ActivoList)
            mActivos = value
        End Set
    End Property

    Private Sub mActivos_AddingNew(sender As Object, e As System.ComponentModel.AddingNewEventArgs) Handles mActivos.AddingNew
        Dim _caract = New Activo(OperadorDatos, True)
        e.NewObject = _caract
    End Sub
#End Region

    Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
        TraBaj_Codigo = CType(Fila("TraBaj_Codigo"), Integer)
        Usuari_Codigo = CStr(Fila("Usuari_Codigo"))
        TraBaj_Observacion = CType(Fila("TraBaj_Observacion"), String)
        TraBaj_Fecha = CDate(Fila("TraBaj_Fecha"))
        Parame_TipoBaja = CType(Fila("Parame_TipoBaja"), Integer)
        Pardet_TipoBaja = CType(Fila("Pardet_TipoBaja"), Integer)
        mUsuario = Nothing
    End Sub

    Public Overridable Function Recargar() As Boolean
        Dim Result As System.Data.DataTable = New System.Data.DataTable
        Dim bReturn As Boolean = True
        OperadorDatos.AgregarParametro("@accion", "C")
        OperadorDatos.AgregarParametro("@TraBaj_Codigo", TraBaj_Codigo)
        OperadorDatos.Procedimiento = _Procedimiento
        bReturn = OperadorDatos.Ejecutar(Result)
        OperadorDatos.LimpiarParametros()
        Try
            Me.MapearDataRowaObjeto(Result.Rows(0))
            EsNuevo = False
            EsModificado = False
        Catch ex As System.Exception
            bReturn = False
        End Try
        Return bReturn
    End Function

    Public Overridable Function Guardar(_Restriccion As Infoware.Reglas.General.Restriccion) As Boolean
        Dim Result As Integer = 0
        Dim bReturn As Boolean = True
        Dim sAccion As String = "M"
        If EsNuevo Then
            sAccion = "I"
        End If

        Dim _comenzotransaccion As Boolean = False
        If Not OperadorDatos.EstaenTransaccion Then
            OperadorDatos.ComenzarTransaccion()
            _comenzotransaccion = True
        End If

        OperadorDatos.AgregarParametro("@accion", sAccion)
        OperadorDatos.AgregarParametro("@TraBaj_Codigo", TraBaj_Codigo)
        OperadorDatos.AgregarParametro("@Usuari_Codigo", Usuari_Codigo)
        OperadorDatos.AgregarParametro("@TraBaj_Observacion", TraBaj_Observacion)
        OperadorDatos.AgregarParametro("@TraBaj_Fecha", TraBaj_Fecha)
        OperadorDatos.AgregarParametro("@Parame_TipoBaja", Parame_TipoBaja)
        OperadorDatos.AgregarParametro("@Pardet_TipoBaja", Pardet_TipoBaja)
        OperadorDatos.Procedimiento = _Procedimiento
        bReturn = OperadorDatos.Ejecutar(Result)
        OperadorDatos.LimpiarParametros()
        If bReturn Then
            If EsNuevo Then
                TraBaj_Codigo = Result
                For Each _activo As Activo In Activos
                    _activo.PardetTipoBajaActivo = PardetTipoBaja
                    _activo.Transaccionbaja = Me
                    _activo.Parame_TipoBajaActivo = Parame_TipoBaja
                    _activo.Pardet_TipoBajaActivo = Pardet_TipoBaja
                    _activo.Activo_FechaBaja = TraBaj_Fecha
                    _activo.TraBaj_Codigo = TraBaj_Codigo

                    If Not _activo.Guardar Then
                        bReturn = False
                        Exit For
                    Else
                        Infoware.Reglas.General.Auditoria.Registrar_Auditoria(_Restriccion, Enumerados.enumTipoAccion.Adicion,
                                                                              "(" + TraBaj_Codigo.ToString + ") Baja de activo " + _activo.Activo_CodigoBarra + " " + _activo.Descripcion +
                                                                              ", motivo de baja: " + PardetTipoBaja.Descripcion + ", Fecha: " + TraBaj_Fecha.ToString("dd'/'MM'/'yyyy"))
                    End If
                Next
            End If

            If Not OperadorDatos.EstaenTransaccion Then
                Me.AceptarCambios()
            End If
        End If
        If _comenzotransaccion Then
            If bReturn Then
                OperadorDatos.TerminarTransaccion()
                AceptarCambios()
            Else
                OperadorDatos.CancelarTransaccion()
            End If
        End If

        Return bReturn
    End Function

    Public Overridable Sub AceptarCambios()
        EsNuevo = False
        EsModificado = False
    End Sub

    Public Overridable Function Eliminar() As Boolean
        Dim bReturn As Boolean = True
        OperadorDatos.AgregarParametro("@accion", "E")
        OperadorDatos.AgregarParametro("@TraBaj_Codigo", TraBaj_Codigo)
        OperadorDatos.Procedimiento = _Procedimiento
        bReturn = OperadorDatos.Ejecutar
        OperadorDatos.LimpiarParametros()
        Return bReturn
    End Function
End Class
#End Region

#Region "TransaccionBajaList"
Public Class TransaccionBajaList
    Inherits System.ComponentModel.BindingList(Of TransaccionBaja)

    Public Shared Function ObtenerLista(_OperadorDatos As OperadorDatos, _Usuario As WWTSUsuario, Optional ByVal _filtro As String = "") As TransaccionBajaList
        Dim oResult As New TransaccionBajaList
        Dim bReturn As Boolean
        Dim ds As DataTable = Nothing
        With _OperadorDatos
            .AgregarParametro("@Accion", "F")
            .AgregarParametro("@Usuari_Codigo", _Usuario.Usuari_Codigo)
            .AgregarParametro("@filtro", _filtro)
            .Procedimiento = "proc_TransaccionBaja"
            bReturn = .Ejecutar(ds)
            .LimpiarParametros()
        End With
        If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
            For Each _dr As DataRow In ds.Rows
                Dim _fila As New TransaccionBaja(_OperadorDatos, False)
                _fila.MapearDataRowaObjeto(_dr)
                oResult.Add(_fila)
            Next
        End If
        Return oResult
    End Function
End Class
#End Region
